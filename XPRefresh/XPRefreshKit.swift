//
//  XPRefreshKit.swift
//  ProjectName
//
//  Created by huangxinping on 5/30/16.
//  Copyright (c) 2016 iiseeuu.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

import UIKit

class XPRefreshKit: NSObject {

	//// Cache

	private struct Cache {
		static var imageOfArrow: UIImage?
		static var arrowTargets: [AnyObject]?
	}

	//// Drawing Methods

	class func drawCanvas() {
		//// Color Declarations
		let fillColor = UIColor(red: 0.772, green: 0.772, blue: 0.772, alpha: 1.000)
		let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

		//// arrow
		//// Group 3
		//// Oval Drawing
		let ovalPath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 52, 52))
		fillColor.setFill()
		ovalPath.fill()

		//// Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.moveToPoint(CGPointMake(27, 54))
		bezierPath.addCurveToPoint(CGPointMake(0, 27), controlPoint1: CGPointMake(12.11, 54), controlPoint2: CGPointMake(0, 41.89))
		bezierPath.addCurveToPoint(CGPointMake(27, 0), controlPoint1: CGPointMake(0, 12.11), controlPoint2: CGPointMake(12.11, 0))
		bezierPath.addCurveToPoint(CGPointMake(54, 27), controlPoint1: CGPointMake(41.89, 0), controlPoint2: CGPointMake(54, 12.11))
		bezierPath.addCurveToPoint(CGPointMake(27, 54), controlPoint1: CGPointMake(54, 41.89), controlPoint2: CGPointMake(41.89, 54))
		bezierPath.closePath()
		bezierPath.moveToPoint(CGPointMake(27, 2))
		bezierPath.addCurveToPoint(CGPointMake(2, 27), controlPoint1: CGPointMake(13.21, 2), controlPoint2: CGPointMake(2, 13.22))
		bezierPath.addCurveToPoint(CGPointMake(27, 52), controlPoint1: CGPointMake(2, 40.78), controlPoint2: CGPointMake(13.21, 52))
		bezierPath.addCurveToPoint(CGPointMake(52, 27), controlPoint1: CGPointMake(40.78, 52), controlPoint2: CGPointMake(52, 40.78))
		bezierPath.addCurveToPoint(CGPointMake(27, 2), controlPoint1: CGPointMake(52, 13.22), controlPoint2: CGPointMake(40.78, 2))
		bezierPath.closePath()
		bezierPath.miterLimit = 4;

		fillColor.setFill()
		bezierPath.fill()

		//// Rectangle Drawing
		let rectanglePath = UIBezierPath(roundedRect: CGRectMake(26, 12.5, 2, 28), cornerRadius: 1)
		fillColor2.setFill()
		rectanglePath.fill()

		//// Bezier 2 Drawing
		let bezier2Path = UIBezierPath()
		bezier2Path.moveToPoint(CGPointMake(27, 41.91))
		bezier2Path.addLineToPoint(CGPointMake(16.29, 31.21))
		bezier2Path.addLineToPoint(CGPointMake(17.71, 29.79))
		bezier2Path.addLineToPoint(CGPointMake(27, 39.09))
		bezier2Path.addLineToPoint(CGPointMake(36.29, 29.79))
		bezier2Path.addLineToPoint(CGPointMake(37.71, 31.21))
		bezier2Path.addLineToPoint(CGPointMake(27, 41.91))
		bezier2Path.closePath()
		bezier2Path.miterLimit = 4;

		fillColor2.setFill()
		bezier2Path.fill()
	}

	//// Generated Images

	class var imageOfArrow: UIImage {
		if Cache.imageOfArrow != nil {
			return Cache.imageOfArrow!
		}

		UIGraphicsBeginImageContextWithOptions(CGSizeMake(54, 54), false, 0)
		XPRefreshKit.drawCanvas()

		Cache.imageOfArrow = UIGraphicsGetImageFromCurrentImageContext()!
		UIGraphicsEndImageContext()

		return Cache.imageOfArrow!
	}

	//// Customization Infrastructure

	@IBOutlet var arrowTargets: [AnyObject]! {
		get { return Cache.arrowTargets }
		set {
			Cache.arrowTargets = newValue
			for target: AnyObject in newValue {
				target.setImage(XPRefreshKit.imageOfArrow)
			}
		}
	}

}

@objc protocol StyleKitSettableImage {
	func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
	func setSelectedImage(image: UIImage!)
}
